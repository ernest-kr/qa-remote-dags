{
	"info": {
		"_postman_id": "936b5b78-21ef-4971-98b9-da897acd7115",
		"name": "AIRFLOW_RESTAPI_DEPLOYMENT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11437072"
	},
	"item": [
		{
			"name": "NegativeTest",
			"item": [
				{
					"name": "TaskInstances_ngtv",
					"item": [
						{
							"name": "List taskinstances_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/{{dag_id}}/dagRuns/xc1/taskInstance",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"{{dag_id}}",
										"dagRuns",
										"xc1",
										"taskInstance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a task instance_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/example_dag/dagRuns/4567/taskInstances/2234",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"example_dag",
										"dagRuns",
										"4567",
										"taskInstances",
										"2234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a list of task instances(batch)_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"execution_date_gte\": \"2020-11-10T11:47:58Z\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/dags/~/dagRuns/~/taskInstances/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"~",
										"dagRuns",
										"~",
										"taskInstances",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "List extra link_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}/links",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"{{dag_id}}",
										"dagRuns",
										"{{dag_run_id}}",
										"taskInstances",
										"{{task_id}}",
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get logs_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}/logs/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"{{dag_id}}",
										"dagRuns",
										"{{dag_run_id}}",
										"taskInstances",
										"{{task_id}}",
										"logs",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DAG_ngtv",
					"item": [
						{
							"name": "ListDAGs_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								},
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/dags/not_existing_dag11",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"not_existing_dag11"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get basic info about a dag_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/dags/example_dag",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"dags",
										"example_dag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a dag_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"is_paused\": false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/dags/not_a_dag",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"not_a_dag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get tasks for dag_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/dags/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "get simplified representation of a dag_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/autherizationdetails",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"autherizationdetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "get as simplified representation of a task_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/autherization/tasks/abc",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"autherization",
										"tasks",
										"abc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear a set of task instances_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.notFound;\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"dry_run\": true,\n\"only_failed\": true,\n\"only_running\": false,\n\"include_subdags\": true,\n\"include_parentdag\": true,\n\"reset_dag_runs\": true\n}"
								},
								"url": {
									"raw": "{{url}}/dags/dag_id/clearTaskInstances",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"dag_id",
										"clearTaskInstances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set task instances state_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.notFound;\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"dry_run\": true,\n\"task_id\": \"{{task_id}}\",\n\"execution_date\": \"2020-11-10T11:47:58Z\",\n\"include_upstream\": true,\n\"include_downstream\": true,\n\"include_future\": true,\n\"include_past\": true,\n\"new_state\": \"success\"\n}\n"
								},
								"url": {
									"raw": "{{url}}/dags/dag_id/updateTaskInstancesState",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"dag_id",
										"updateTaskInstancesState"
									]
								}
							},
							"response": []
						}
					],
					"description": "Running this folder requires you have a dag named branch_and_subdag",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DAGRUNS_ngtv",
					"item": [
						{
							"name": "List DAGRUNS_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/autherization/not_a_dag/dagRuns",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"autherization",
										"not_a_dag",
										"dagRuns"
									]
								}
							},
							"response": []
						},
						{
							"name": "Trigger a dagrun_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"execution_date\": \"2020-11-10T11:47:58Z\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/dags/dag_id/dagRuns",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"dag_id",
										"dagRuns"
									]
								}
							},
							"response": []
						},
						{
							"name": "List dagruns batch_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"execution_date_lte\": \"2020-11-20T11:47:58Z\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/dags/dag_id/tasks/dagRuns/list",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"dag_id",
										"tasks",
										"dagRuns",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a dagrun_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"  \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/dags/autherization/tasks/no_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"dags",
										"autherization",
										"tasks",
										"no_id"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Variables_negtv",
					"item": [
						{
							"name": "variables_Post 422",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"key\": \"string\",\r\n  \"value1\": \"string\",\r\n  \"description\": \"string\",\r\n  \"status\": 0,\r\n  \"detail\": \"string\",\r\n  \"instance\": \"string\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/variables",
									"host": [
										"{{url}}"
									],
									"path": [
										"variables"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "connection _ngtv",
					"item": [
						{
							"name": "List connections_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/connection",
									"host": [
										"{{url}}"
									],
									"path": [
										"connection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create connection_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											" \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"connection_id\": \"string\",\n\"conn_type\": \"string\",\n\"host\": \"string\",\n\"login\": \"string\",\n\"schema\": \"string\",\n\"port\": 0,\n\"password\": \"pa$$word\",\n\"extra\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/connection",
									"host": [
										"{{url}}"
									],
									"path": [
										"connection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a connection_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/connection/string",
									"host": [
										"{{url}}"
									],
									"path": [
										"connection",
										"string"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a connection_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"     \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"port\": 8080}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/connection/string",
									"host": [
										"{{url}}"
									],
									"path": [
										"connection",
										"string"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a connection_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"response must have a json body\", function () {\r",
											"     pm.response.to.be.withBody;\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/connections/string1",
									"host": [
										"{{url}}"
									],
									"path": [
										"connections",
										"string1"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Connection",
			"item": [
				{
					"name": "Create connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql(\"Created\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().connection_id).to.eql(pm.collectionVariables.get(\"connection_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"connection_id\": \"{{connection_id}}\",\n\"conn_type\": \"string\",\n\"host\": \"string\",\n\"login\": \"string\",\n\"schema\": \"string\",\n\"port\": 10,\n\"password\": \"pa$$word\",\n\"extra\": \"{\\\"api_token\\\":\\\"val\\\"}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/connections",
							"host": [
								"{{url}}"
							],
							"path": [
								"connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create default connections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(204);",
									"    pm.expect(pm.response.status).to.eql(\"No Content\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/connections/defaults",
							"host": [
								"{{url}}"
							],
							"path": [
								"connections",
								"defaults"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create bulk connections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql(\"Created\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().connections[0].connection_id).to.eql(\"string1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"connections\": [\n    {\n      \"connection_id\": \"string1\",\n      \"conn_type\": \"string\",\n      \"description\": \"string\",\n      \"host\": \"string\",\n      \"login\": \"string\",\n      \"schema\": \"string\",\n      \"port\": 10,\n      \"password\": \"string\",\n      \"extra\": \"{\\\"api_token\\\":\\\"val\\\"}\"\n    }\n  ]\n}\n\n// 500 error",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/connections/bulk",
							"host": [
								"{{url}}"
							],
							"path": [
								"connections",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "List connections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().connections.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/connections",
							"host": [
								"{{url}}"
							],
							"path": [
								"connections"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().connection_id).to.eql(pm.collectionVariables.get(\"connection_id\"));",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.all.keys      ",
									"          (",
									"            'conn_type',",
									"            'connection_id',",
									"            'description',",
									"            'extra',",
									"            'host',",
									"            'login',",
									"            'port',",
									"            'schema',",
									"            'password'",
									"        );",
									"    pm.expect(responseJson.extra).to.eql(\"{\\\"api_token\\\": \\\"***\\\"}\");",
									" ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/connections/{{connection_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"connections",
								"{{connection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().port).to.eql(8080);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"connection_id\": \"{{connection_id}}\",\n  \"conn_type\": \"string\",\n  \"port\": 8080\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/connections/:connection_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"connections",
								":connection_id"
							],
							"variable": [
								{
									"key": "connection_id",
									"value": "{{connection_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/connections/:connection_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"connections",
								":connection_id"
							],
							"variable": [
								{
									"key": "connection_id",
									"value": "{{connection_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DAG",
			"item": [
				{
					"name": "List dags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().dags.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get basic info about a dag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DAG details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"concurrency\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/details",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dag Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().tags).to.include(pm.collectionVariables.get(\"tag_name\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dagTags",
							"host": [
								"{{url}}"
							],
							"path": [
								"dagTags"
							]
						},
						"description": "Get all DAG tags."
					},
					"response": []
				},
				{
					"name": "Update a dag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\": false}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Dags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test('Validate response body', function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.dags[0].is_paused).to.eql(false);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"is_paused\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags?dag_id_pattern=test&only_active=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "dag_id_pattern",
									"value": "test"
								},
								{
									"key": "only_active",
									"value": "true"
								}
							]
						},
						"description": "Patch multiple DAGs."
					},
					"response": []
				},
				{
					"name": "Delete Dag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{delete_dag}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{delete_dag}}"
							]
						},
						"description": "Delete the specific DAG."
					},
					"response": []
				},
				{
					"name": "Filter dags",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/dags?tags={{tag_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "tags",
									"value": "{{tag_name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pause Dags By Dag Id Filter Like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifying all example dags are paused\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.dags.length; i++){\r",
									"        pm.expect(jsonData.dags[i].is_paused).to.eql(true);\r",
									"        pm.expect(jsonData.dags[i].dag_id).to.contains(\"example\");\r",
									"    }\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\":true}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags?dag_id_pattern=example_",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "dag_id_pattern",
									"value": "example_"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pause Dags By Dag Id Filter only active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifying all example dags are paused\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.dags.length; i++){\r",
									"        pm.expect(jsonData.dags[i].is_active).to.eql(true);\r",
									"        pm.expect(jsonData.dags[i].is_paused).to.eql(true);\r",
									"    }\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\":true}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags?dag_id_pattern=~&&only_active=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "dag_id_pattern",
									"value": "~"
								},
								{
									"key": null,
									"value": null
								},
								{
									"key": "only_active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pause Dags By Dag Id Filter only active false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifying all example dags are paused\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.dags.length; i++){\r",
									"        pm.expect(jsonData.dags[i].is_active).to.be.oneOf([true, false]);\r",
									"        pm.expect(jsonData.dags[i].is_paused).to.eql(true);\r",
									"    }\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\":true}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags?dag_id_pattern=~&&only_active=false",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "dag_id_pattern",
									"value": "~"
								},
								{
									"key": null,
									"value": null
								},
								{
									"key": "only_active",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pause Dags By Dag Id Filter only active false Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifying all example dags are paused\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.dags.length; i++){\r",
									"        pm.expect(jsonData.dags[i].is_active).to.eql(true);\r",
									"        pm.expect(jsonData.dags[i].is_paused).to.eql(true);\r",
									"       // pm.expect(jsonData.dags[i].tags).to.eql(\"core\");\r",
									"    }\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\":true}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags?dag_id_pattern=~&&tags=core",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "dag_id_pattern",
									"value": "~"
								},
								{
									"key": null,
									"value": null
								},
								{
									"key": "tags",
									"value": "core"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unpause Dags By Dag Id Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifying all dags are unpaused\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    for (var i = 0; i < jsonData.dags.length; i++){\r",
									"        pm.expect(jsonData.dags[i].is_paused).to.eql(false);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\": false}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags?dag_id_pattern=~",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags"
							],
							"query": [
								{
									"key": "dag_id_pattern",
									"value": "~"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mapped Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verifying dag is mapped\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    let jsonData=pm.response.json();",
									"    pm.expect(jsonData.tasks[0].is_mapped).to.eql(true);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"tasks"
							]
						}
					},
					"response": []
				}
			],
			"description": "Running this folder requires you have a dag named branch_and_subdag",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "a8a4a7603a9fb0cbe15536415a484b89\n",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DAGRUNS",
			"item": [
				{
					"name": "Trigger a dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    ",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set('dag_run_id', jsonData.dag_run_id);",
									"setTimeout(function(){}, 10000);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"execution_date\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns"
							]
						}
					},
					"response": []
				},
				{
					"name": "List DAGRUNS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().dag_runs.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().dag_run_id).to.eql(pm.collectionVariables.get(\"dag_run_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify a dag run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Modify a dag run',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().state).to.eql(\"success\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"state\": \"success\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear a dag run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Clear a dag run',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dry_run\": true,\n  \"only_failed\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/clear",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"clear"
							]
						}
					},
					"response": []
				},
				{
					"name": "List dagruns batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"logical_date_lte\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/~/dagRuns/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"~",
								"dagRuns",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.be.withBody;",
									"    pm.response.to.not.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Trigger a mapped dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    ",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set('mapped_dag_run_id', jsonData.dag_run_id)",
									"setTimeout(function(){}, 10000);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"execution_date\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"dagRuns"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Assets",
			"item": [
				{
					"name": "PreReq-Unpause a DAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\": false}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{asset_dag_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{asset_dag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PreReq-Trigger a dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    setTimeout(function(){}, 10000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"execution_date\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{asset_dag_id}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{asset_dag_id}}",
								"dagRuns"
							]
						}
					},
					"response": []
				},
				{
					"name": "PreReq-Trigger a queued event dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    setTimeout(function(){}, 10000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"execution_date\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{queued_event_dag_id_producer}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{queued_event_dag_id_producer}}",
								"dagRuns"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().assets.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/assets",
							"host": [
								"{{url}}"
							],
							"path": [
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get asset aliases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().asset_aliases.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/assets/aliases",
							"host": [
								"{{url}}"
							],
							"path": [
								"assets",
								"aliases"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an asset alias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().id).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/assets/aliases/:asset_alias_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"assets",
								"aliases",
								":asset_alias_id"
							],
							"variable": [
								{
									"key": "asset_alias_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Asset Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test('Validate response body', function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response.asset_id).to.eql(1);",
									"    setTimeout(function(){}, 5000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"asset_id\": 1,\n  \"extra\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/assets/events",
							"host": [
								"{{url}}"
							],
							"path": [
								"assets",
								"events"
							]
						},
						"description": "Create asset events."
					},
					"response": []
				},
				{
					"name": "Get Assets Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    setTimeout(function(){}, 10000);",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('asset_dag_run_id', jsonData.asset_events[0].created_dagruns[0].run_id);",
									"    pm.collectionVariables.set('asset_dag_id', jsonData.asset_events[0].created_dagruns[0].dag_id);",
									"    console.log(jsonData.asset_events[0].created_dagruns[0].run_id)",
									"    setTimeout(function(){}, 2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/assets/events",
							"host": [
								"{{url}}"
							],
							"path": [
								"assets",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Asset Queued Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json().queued_events.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/assets/{{asset_id}}/queuedEvents",
							"host": [
								"{{url}}"
							],
							"path": [
								"assets",
								"{{asset_id}}",
								"queuedEvents"
							]
						},
						"description": "Get queued asset events for an asset."
					},
					"response": []
				},
				{
					"name": "Get upstream asset events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    setTimeout(function(){}, 10000);",
									"    pm.expect(pm.response.json().asset_events.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/dags/{{asset_dag_id}}/dagRuns/{{asset_dag_run_id}}/upstreamAssetEvents",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{asset_dag_id}}",
								"dagRuns",
								"{{asset_dag_run_id}}",
								"upstreamAssetEvents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List assets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().id).to.eql(parseInt(pm.collectionVariables.get(\"asset_id\")));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/assets/{{asset_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"assets",
								"{{asset_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dag Asset Queued Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dags/:dag_id/assets/queuedEvents",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								":dag_id",
								"assets",
								"queuedEvents"
							],
							"variable": [
								{
									"key": "dag_id",
									"value": "{{queued_event_dag_id}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get queued asset events for a DAG."
					},
					"response": []
				},
				{
					"name": "Get Dag Asset Queued Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dags/:dag_id/assets/:asset_id/queuedEvents",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								":dag_id",
								"assets",
								":asset_id",
								"queuedEvents"
							],
							"variable": [
								{
									"key": "dag_id",
									"value": "{{queued_event_dag_id}}",
									"description": "(Required) "
								},
								{
									"key": "asset_id",
									"value": "{{asset_id}}"
								}
							]
						},
						"description": "Get a queued asset event for a DAG."
					},
					"response": []
				},
				{
					"name": "Delete Dag Asset Queued Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dags/:dag_id/assets/:asset_id/queuedEvents",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								":dag_id",
								"assets",
								":asset_id",
								"queuedEvents"
							],
							"variable": [
								{
									"key": "dag_id",
									"value": "{{queued_event_dag_id}}",
									"description": "(Required) "
								},
								{
									"key": "asset_id",
									"value": "{{asset_id}}"
								}
							]
						},
						"description": "Delete a queued asset event for a DAG."
					},
					"response": []
				},
				{
					"name": "Delete Dag Asset Queued Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dags/:dag_id/assets/queuedEvents",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								":dag_id",
								"assets",
								"queuedEvents"
							],
							"variable": [
								{
									"key": "dag_id",
									"value": "{{queued_event_dag_id2}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PreReq-Trigger a queued event dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    setTimeout(function(){}, 10000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"execution_date\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{queued_event_dag_id_producer}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{queued_event_dag_id_producer}}",
								"dagRuns"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Asset Queued Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/assets/{{asset_id}}/queuedEvents",
							"host": [
								"{{url}}"
							],
							"path": [
								"assets",
								"{{asset_id}}",
								"queuedEvents"
							]
						},
						"description": "Delete queued asset events for an asset."
					},
					"response": []
				}
			]
		},
		{
			"name": "DagWarning",
			"item": [
				{
					"name": "List Dag warnings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List Plugins',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"dag_warnings\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/dagWarnings",
							"host": [
								"{{url}}"
							],
							"path": [
								"dagWarnings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EventLog",
			"item": [
				{
					"name": "List log entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().event_logs.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/eventLogs",
							"host": [
								"{{url}}"
							],
							"path": [
								"eventLogs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a log entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().event_log_id).to.eql(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/eventLogs/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"eventLogs",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Extra Links",
			"item": [
				{
					"name": "PreReq-Trigger a dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"dag_run_id\", jsonData.dag_run_id);",
									"    setTimeout(function(){}, 10000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"execution_date\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns"
							]
						}
					},
					"response": []
				},
				{
					"name": "List extra link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}/links",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"taskInstances",
								"{{task_id}}",
								"links"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TaskInstances",
			"item": [
				{
					"name": "PreReq-Unpause a DAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\": false}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PreReq-Trigger a mapped dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"mapped_dag_run_id\", jsonData.dag_run_id);",
									"    setTimeout(function(){}, 10000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"execution_date\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"dagRuns"
							]
						}
					},
					"response": []
				},
				{
					"name": "List taskinstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().task_instances.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"taskInstances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a task instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().task_id).to.eql(pm.collectionVariables.get(\"task_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"taskInstances",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch task instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().state).to.eql(\"failed\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"failed\",\n  \"note\": \"string\",\n  \"include_upstream\": false,\n  \"include_downstream\": false,\n  \"include_future\": false,\n  \"include_past\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"taskInstances",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get details of all mapped task instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().task_instances.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/dagRuns/{{mapped_dag_run_id}}/taskInstances/{{mapped_task_id}}/listMapped",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"dagRuns",
								"{{mapped_dag_run_id}}",
								"taskInstances",
								"{{mapped_task_id}}",
								"listMapped"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mapped Task Instance Dependencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"dependencies\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/dagRuns/{{mapped_dag_run_id}}/taskInstances/{{mapped_task_id}}/:map_index/dependencies",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"dagRuns",
								"{{mapped_dag_run_id}}",
								"taskInstances",
								"{{mapped_task_id}}",
								":map_index",
								"dependencies"
							],
							"variable": [
								{
									"key": "map_index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task Instance Dependencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"dependencies\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}/dependencies",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"taskInstances",
								"{{task_id}}",
								"dependencies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get task instance tries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().task_instances.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}/tries",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"taskInstances",
								"{{task_id}}",
								"tries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get task instance try details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}/tries/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"taskInstances",
								"{{task_id}}",
								"tries",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mapped task instance tries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().task_instances.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/dagRuns/{{mapped_dag_run_id}}/taskInstances/{{mapped_task_id}}/:map_index/tries",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"dagRuns",
								"{{mapped_dag_run_id}}",
								"taskInstances",
								"{{mapped_task_id}}",
								":map_index",
								"tries"
							],
							"variable": [
								{
									"key": "map_index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get mapped task instance try details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/dagRuns/{{mapped_dag_run_id}}/taskInstances/{{mapped_task_id}}/:map_index/tries/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"dagRuns",
								"{{mapped_dag_run_id}}",
								"taskInstances",
								"{{mapped_task_id}}",
								":map_index",
								"tries",
								"1"
							],
							"variable": [
								{
									"key": "map_index",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get details of a mapped task instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().task_id).to.eql(pm.collectionVariables.get(\"mapped_task_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/dagRuns/{{mapped_dag_run_id}}/taskInstances/{{mapped_task_id}}/:map_index",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"dagRuns",
								"{{mapped_dag_run_id}}",
								"taskInstances",
								"{{mapped_task_id}}",
								":map_index"
							],
							"variable": [
								{
									"key": "map_index",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch mapped task instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dry_run\": false,\n  \"new_state\": \"success\",\n  \"note\": \"string\",\n  \"include_upstream\": false,\n  \"include_downstream\": false,\n  \"include_future\": false,\n  \"include_past\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{mapped_dag_id}}/dagRuns/{{mapped_dag_run_id}}/taskInstances/{{mapped_task_id}}/:map_index",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{mapped_dag_id}}",
								"dagRuns",
								"{{mapped_dag_run_id}}",
								"taskInstances",
								"{{mapped_task_id}}",
								":map_index"
							],
							"variable": [
								{
									"key": "map_index",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a list of task instances(batch)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"logical_date_lte\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/~/dagRuns/~/taskInstances/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"~",
								"dagRuns",
								"~",
								"taskInstances",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/dagRuns/{{dag_run_id}}/taskInstances/{{task_id}}/logs/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"dagRuns",
								"{{dag_run_id}}",
								"taskInstances",
								"{{task_id}}",
								"logs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Clear Task Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dry_run\": true,\n  \"only_failed\": false,\n  \"only_running\": false,\n  \"reset_dag_runs\": false,\n  \"task_ids\": [\n    \"{{task_id}}\"\n  ],\n  \"dag_run_id\": \"{{dag_run_id}}\"\n}\n\n// not getting 500 without dag_run_id",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}/clearTaskInstances",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}",
								"clearTaskInstances"
							]
						},
						"description": "Clear task instances."
					},
					"response": []
				}
			]
		},
		{
			"name": "ImportError",
			"item": [
				{
					"name": "List import errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/importErrors",
							"host": [
								"{{url}}"
							],
							"path": [
								"importErrors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an import error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/importErrors/{{import_error_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"importErrors",
								"{{import_error_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Jobs",
			"item": [
				{
					"name": "Get Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List Plugins',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().jobs.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/jobs",
							"host": [
								"{{url}}"
							],
							"path": [
								"jobs"
							]
						},
						"description": "Get all jobs."
					},
					"response": []
				}
			]
		},
		{
			"name": "Plugins",
			"item": [
				{
					"name": "List Plugins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List Plugins',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().plugins.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/plugins",
							"host": [
								"{{url}}"
							],
							"path": [
								"plugins"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pool",
			"item": [
				{
					"name": "Create pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql(\"Created\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().name).to.eql(\"string\");",
									"    setTimeout(function(){}, 2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"strictSSL": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"{{pool_name}}\",\n\"slots\": 50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pools",
							"host": [
								"{{url}}"
							],
							"path": [
								"pools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create multiple pools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql(\"Created\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    console.log(pm.response.json().total_entries)",
									"    pm.expect(pm.response.json().total_entries).to.eql(2);",
									"    setTimeout(function(){}, 2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"strictSSL": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pools\": [\n    {\n      \"name\": \"string1\",\n      \"slots\": 10,\n      \"description\": \"string1\",\n      \"include_deferred\": false\n    },\n    {\n      \"name\": \"string2\",\n      \"slots\": 20,\n      \"description\": \"string2\",\n      \"include_deferred\": false\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pools/bulk",
							"host": [
								"{{url}}"
							],
							"path": [
								"pools",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "List pools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().pools.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/pools",
							"host": [
								"{{url}}"
							],
							"path": [
								"pools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/pools/{{pool_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pools",
								"{{pool_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().slots).to.eql(100);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"slots\": 100, \n    \"pool\": \"string\",\n    \"include_deferred\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pools/{{pool_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pools",
								"{{pool_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(204);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/pools/{{pool_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pools",
								"{{pool_name}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Providers",
			"item": [
				{
					"name": "List Providers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List Providers',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().providers.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/providers",
							"host": [
								"{{url}}"
							],
							"path": [
								"providers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "XCOM",
			"item": [
				{
					"name": "PreReq-Unpause a DAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"is_paused\": false}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{xcom_dag_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{xcom_dag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PreReq-Trigger a dagrun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    ",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setGlobalVariable(\"xcom_dag_run_id\", jsonData.dag_run_id);",
									"setTimeout(function(){}, 10000);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"execution_date\": \"{{$isoTimestamp}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/dags/{{xcom_dag_id}}/dagRuns",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{xcom_dag_id}}",
								"dagRuns"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Xcom entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"xcom_entries\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{xcom_dag_id}}/dagRuns/{{xcom_dag_run_id}}/taskInstances/{{xcom_task_id}}/xcomEntries",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{xcom_dag_id}}",
								"dagRuns",
								"{{xcom_dag_run_id}}",
								"taskInstances",
								"{{xcom_task_id}}",
								"xcomEntries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an xcom entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().key).to.eql(\"return_value\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{xcom_dag_id}}/dagRuns/{{xcom_dag_run_id}}/taskInstances/{{xcom_task_id}}/xcomEntries/{{xcom_key}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{xcom_dag_id}}",
								"dagRuns",
								"{{xcom_dag_run_id}}",
								"taskInstances",
								"{{xcom_task_id}}",
								"xcomEntries",
								"{{xcom_key}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "Get Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List Plugins',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().tasks.length).to.be.greaterThan(0);",
									"    var response = pm.response.json();",
									"    pm.collectionVariables.set(\"task_id\", response.tasks[0].task_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dags/:dag_id/tasks",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								":dag_id",
								"tasks"
							],
							"variable": [
								{
									"key": "dag_id",
									"value": "{{dag_id}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get tasks for DAG."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks?order_by=task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks"
									],
									"query": [
										{
											"key": "order_by",
											"value": "task_id"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"tasks\": [\n    {\n      \"task_id\": \"<string>\",\n      \"task_display_name\": \"<string>\",\n      \"owner\": \"<string>\",\n      \"start_date\": \"<dateTime>\",\n      \"end_date\": \"<dateTime>\",\n      \"trigger_rule\": \"<string>\",\n      \"depends_on_past\": \"<boolean>\",\n      \"wait_for_downstream\": \"<boolean>\",\n      \"retries\": \"<number>\",\n      \"queue\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<number>\",\n      \"execution_timeout\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"retry_delay\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"retry_exponential_backoff\": \"<boolean>\",\n      \"priority_weight\": \"<number>\",\n      \"weight_rule\": \"<string>\",\n      \"ui_color\": \"<string>\",\n      \"ui_fgcolor\": \"<string>\",\n      \"template_fields\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"downstream_task_ids\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"doc_md\": \"<string>\",\n      \"operator_name\": \"<string>\",\n      \"params\": \"<object>\",\n      \"class_ref\": \"<object>\",\n      \"is_mapped\": \"<boolean>\",\n      \"extra_links\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"task_id\": \"<string>\",\n      \"task_display_name\": \"<string>\",\n      \"owner\": \"<string>\",\n      \"start_date\": \"<dateTime>\",\n      \"end_date\": \"<dateTime>\",\n      \"trigger_rule\": \"<string>\",\n      \"depends_on_past\": \"<boolean>\",\n      \"wait_for_downstream\": \"<boolean>\",\n      \"retries\": \"<number>\",\n      \"queue\": \"<string>\",\n      \"pool\": \"<string>\",\n      \"pool_slots\": \"<number>\",\n      \"execution_timeout\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"retry_delay\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"retry_exponential_backoff\": \"<boolean>\",\n      \"priority_weight\": \"<number>\",\n      \"weight_rule\": \"<string>\",\n      \"ui_color\": \"<string>\",\n      \"ui_fgcolor\": \"<string>\",\n      \"template_fields\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"downstream_task_ids\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"doc_md\": \"<string>\",\n      \"operator_name\": \"<string>\",\n      \"params\": \"<object>\",\n      \"class_ref\": \"<object>\",\n      \"is_mapped\": \"<boolean>\",\n      \"extra_links\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks?order_by=task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks"
									],
									"query": [
										{
											"key": "order_by",
											"value": "task_id"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks?order_by=task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks"
									],
									"query": [
										{
											"key": "order_by",
											"value": "task_id"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks?order_by=task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks"
									],
									"query": [
										{
											"key": "order_by",
											"value": "task_id"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks?order_by=task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks"
									],
									"query": [
										{
											"key": "order_by",
											"value": "task_id"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks?order_by=task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks"
									],
									"query": [
										{
											"key": "order_by",
											"value": "task_id"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List Plugins',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().task_id).to.eql(pm.collectionVariables.get(\"task_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dags/:dag_id/tasks/:task_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								":dag_id",
								"tasks",
								":task_id"
							],
							"variable": [
								{
									"key": "dag_id",
									"value": "{{dag_id}}",
									"description": "(Required) "
								},
								{
									"key": "task_id",
									"value": "{{task_id}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get simplified representation of a task."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks/:task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks",
										":task_id"
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "task_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"task_id\": \"<string>\",\n  \"task_display_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"start_date\": \"<dateTime>\",\n  \"end_date\": \"<dateTime>\",\n  \"trigger_rule\": \"<string>\",\n  \"depends_on_past\": \"<boolean>\",\n  \"wait_for_downstream\": \"<boolean>\",\n  \"retries\": \"<number>\",\n  \"queue\": \"<string>\",\n  \"pool\": \"<string>\",\n  \"pool_slots\": \"<number>\",\n  \"execution_timeout\": {\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\",\n    \"__type\": \"TimeDelta\"\n  },\n  \"retry_delay\": {\n    \"days\": \"<integer>\",\n    \"seconds\": \"<integer>\",\n    \"microseconds\": \"<integer>\",\n    \"__type\": \"TimeDelta\"\n  },\n  \"retry_exponential_backoff\": \"<boolean>\",\n  \"priority_weight\": \"<number>\",\n  \"weight_rule\": \"<string>\",\n  \"ui_color\": \"<string>\",\n  \"ui_fgcolor\": \"<string>\",\n  \"template_fields\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"downstream_task_ids\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"doc_md\": \"<string>\",\n  \"operator_name\": \"<string>\",\n  \"params\": \"<object>\",\n  \"class_ref\": \"<object>\",\n  \"is_mapped\": \"<boolean>\",\n  \"extra_links\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks/:task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks",
										":task_id"
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "task_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks/:task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks",
										":task_id"
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "task_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks/:task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks",
										":task_id"
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "task_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks/:task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks",
										":task_id"
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "task_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dags/:dag_id/tasks/:task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dags",
										":dag_id",
										"tasks",
										":task_id"
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "task_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Variables",
			"item": [
				{
					"name": "Create variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql(\"Created\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    setTimeout(function(){}, 2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"key\": \"{{variable_key}}\",\n\"value\": \"string\"\n}"
						},
						"url": {
							"raw": "{{url}}/variables",
							"host": [
								"{{url}}"
							],
							"path": [
								"variables"
							]
						}
					},
					"response": []
				},
				{
					"name": "List variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						},
						"strictSSL": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/variables",
							"host": [
								"{{url}}"
							],
							"path": [
								"variables"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/variables/{{variable_key}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"variables",
								"{{variable_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"key\" : \"string\",\n\"value\": \"myvalue\"\n}"
						},
						"url": {
							"raw": "{{url}}/variables/{{variable_key}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"variables",
								"{{variable_key}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(204);",
									"   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"key\" : \"string\",\n\"value\": \"myvalue\"\n}"
						},
						"url": {
							"raw": "{{url}}/variables/string",
							"host": [
								"{{url}}"
							],
							"path": [
								"variables",
								"string"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DAG Parsing",
			"item": [
				{
					"name": "PreReq - Get basic info about a dag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('dag_parsing_file_token', jsonData.file_token);",
									"    pm.expect(pm.response.json().dag_id).to.eql(pm.collectionVariables.get(\"dag_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/dags/{{dag_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"dags",
								"{{dag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request re-parsing a DAG file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List Plugins',function(){",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql(\"Created\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/parseDagFile/:file_token",
							"host": [
								"{{url}}"
							],
							"path": [
								"parseDagFile",
								":file_token"
							],
							"variable": [
								{
									"key": "file_token",
									"value": "{{dag_parsing_file_token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Monitoring",
			"item": [
				{
					"name": "Get an instance status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/monitor/health",
							"host": [
								"{{url}}"
							],
							"path": [
								"monitor",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get version information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Success',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"version\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/version",
							"host": [
								"{{url}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "backfills",
			"item": [
				{
					"name": "Create Backfill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().is_paused).to.eql(false);",
									"    var response = pm.response.json();",
									"    pm.collectionVariables.set(\"backfill_id\", response.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var tomorrow = (Date.now() + 86400000)",
									"var yesterday = (Date.now() - 86400000) // 24hrs in ms",
									"pm.collectionVariables.set(\"tomorrow\", new Date(tomorrow).toISOString())",
									"pm.collectionVariables.set('yesterday', new Date(yesterday).toISOString())",
									"",
									"// var moment = require('moment')",
									"",
									"// pm.collectionVariables.set(\"current_timestamp\", moment().toISOString())",
									"// pm.collectionVariables.set(\"current_timestamp - 100 days\", moment().subtract(100, 'day').toISOString())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dag_id\": \"{{dag_id}}\",\n  \"from_date\": \"{{yesterday}}\",\n  \"to_date\": \"{{tomorrow}}\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": {},\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/backfills",
							"host": [
								"{{url}}"
							],
							"path": [
								"backfills"
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<integer>\",\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"dag_run_conf\": \"<object>\",\n  \"is_paused\": \"<boolean>\",\n  \"reprocess_behavior\": \"<string>\",\n  \"max_active_runs\": \"<integer>\",\n  \"created_at\": \"<dateTime>\",\n  \"completed_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Conflict",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "List Backfills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().backfills.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/backfills?dag_id={{dag_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"backfills"
							],
							"query": [
								{
									"key": "dag_id",
									"value": "{{dag_id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills?dag_id=<string>&limit=100&offset=0&order_by=id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									],
									"query": [
										{
											"key": "dag_id",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "order_by",
											"value": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"backfills\": [\n    {\n      \"id\": \"<integer>\",\n      \"dag_id\": \"<string>\",\n      \"from_date\": \"<dateTime>\",\n      \"to_date\": \"<dateTime>\",\n      \"dag_run_conf\": \"<object>\",\n      \"is_paused\": \"<boolean>\",\n      \"reprocess_behavior\": \"<string>\",\n      \"max_active_runs\": \"<integer>\",\n      \"created_at\": \"<dateTime>\",\n      \"completed_at\": \"<dateTime>\",\n      \"updated_at\": \"<dateTime>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"dag_id\": \"<string>\",\n      \"from_date\": \"<dateTime>\",\n      \"to_date\": \"<dateTime>\",\n      \"dag_run_conf\": \"<object>\",\n      \"is_paused\": \"<boolean>\",\n      \"reprocess_behavior\": \"<string>\",\n      \"max_active_runs\": \"<integer>\",\n      \"created_at\": \"<dateTime>\",\n      \"completed_at\": \"<dateTime>\",\n      \"updated_at\": \"<dateTime>\"\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills?dag_id=<string>&limit=100&offset=0&order_by=id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									],
									"query": [
										{
											"key": "dag_id",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "order_by",
											"value": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills?dag_id=<string>&limit=100&offset=0&order_by=id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									],
									"query": [
										{
											"key": "dag_id",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "order_by",
											"value": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills?dag_id=<string>&limit=100&offset=0&order_by=id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									],
									"query": [
										{
											"key": "dag_id",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "order_by",
											"value": "id"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Pause Backfill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().is_paused).to.eql(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/backfills/:backfill_id/pause",
							"host": [
								"{{url}}"
							],
							"path": [
								"backfills",
								":backfill_id",
								"pause"
							],
							"variable": [
								{
									"key": "backfill_id",
									"value": "{{backfill_id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/pause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"pause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<integer>\",\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"dag_run_conf\": \"<object>\",\n  \"is_paused\": \"<boolean>\",\n  \"reprocess_behavior\": \"<string>\",\n  \"max_active_runs\": \"<integer>\",\n  \"created_at\": \"<dateTime>\",\n  \"completed_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/pause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"pause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/pause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"pause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/pause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"pause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Conflict",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/pause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"pause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/pause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"pause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Get Backfill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"backfill_id\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/backfills/:backfill_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"backfills",
								":backfill_id"
							],
							"variable": [
								{
									"key": "backfill_id",
									"value": "{{backfill_id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<integer>\",\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"dag_run_conf\": \"<object>\",\n  \"is_paused\": \"<boolean>\",\n  \"reprocess_behavior\": \"<string>\",\n  \"max_active_runs\": \"<integer>\",\n  \"created_at\": \"<dateTime>\",\n  \"completed_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Unpause Backfill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().is_paused).to.eql(false);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/backfills/:backfill_id/unpause",
							"host": [
								"{{url}}"
							],
							"path": [
								"backfills",
								":backfill_id",
								"unpause"
							],
							"variable": [
								{
									"key": "backfill_id",
									"value": "{{backfill_id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/unpause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"unpause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<integer>\",\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"dag_run_conf\": \"<object>\",\n  \"is_paused\": \"<boolean>\",\n  \"reprocess_behavior\": \"<string>\",\n  \"max_active_runs\": \"<integer>\",\n  \"created_at\": \"<dateTime>\",\n  \"completed_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/unpause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"unpause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/unpause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"unpause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/unpause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"unpause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Conflict",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/unpause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"unpause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/unpause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"unpause"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Cancel Backfill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().is_paused).to.eql(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/backfills/:backfill_id/cancel",
							"host": [
								"{{url}}"
							],
							"path": [
								"backfills",
								":backfill_id",
								"cancel"
							],
							"variable": [
								{
									"key": "backfill_id",
									"value": "{{backfill_id}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"cancel"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<integer>\",\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"dag_run_conf\": \"<object>\",\n  \"is_paused\": \"<boolean>\",\n  \"reprocess_behavior\": \"<string>\",\n  \"max_active_runs\": \"<integer>\",\n  \"created_at\": \"<dateTime>\",\n  \"completed_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"cancel"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"cancel"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"cancel"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Conflict",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"cancel"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/backfills/:backfill_id/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills",
										":backfill_id",
										"cancel"
									],
									"variable": [
										{
											"key": "backfill_id",
											"value": "",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Create Backfill DryRun",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"backfills\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var tomorrow = (Date.now() + 86400000)",
									"var yesterday = (Date.now() - 86400000) // 24hrs in ms",
									"pm.collectionVariables.set(\"tomorrow\", new Date(tomorrow).toISOString())",
									"pm.collectionVariables.set('yesterday', new Date(yesterday).toISOString())",
									"",
									"// var moment = require('moment')",
									"",
									"// pm.collectionVariables.set(\"current_timestamp\", moment().toISOString())",
									"// pm.collectionVariables.set(\"current_timestamp - 100 days\", moment().subtract(100, 'day').toISOString())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dag_id\": \"{{dag_id}}\",\n  \"from_date\": \"{{yesterday}}\",\n  \"to_date\": \"{{tomorrow}}\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": {},\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/backfills/dry_run",
							"host": [
								"{{url}}"
							],
							"path": [
								"backfills",
								"dry_run"
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<integer>\",\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"dag_run_conf\": \"<object>\",\n  \"is_paused\": \"<boolean>\",\n  \"reprocess_behavior\": \"<string>\",\n  \"max_active_runs\": \"<integer>\",\n  \"created_at\": \"<dateTime>\",\n  \"completed_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Conflict",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dag_id\": \"<string>\",\n  \"from_date\": \"<dateTime>\",\n  \"to_date\": \"<dateTime>\",\n  \"run_backwards\": false,\n  \"dag_run_conf\": \"<object>\",\n  \"reprocess_behavior\": \"none\",\n  \"max_active_runs\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/backfills",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"backfills"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "DagSource",
			"item": [
				{
					"name": "Get Dag Source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json()).to.have.property(\"version_number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dagSources/:dag_id",
							"host": [
								"{{url}}"
							],
							"path": [
								"dagSources",
								":dag_id"
							],
							"variable": [
								{
									"key": "dag_id",
									"value": "{{dag_id}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get source code using file token."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagSources/:dag_id?version_number=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagSources",
										":dag_id"
									],
									"query": [
										{
											"key": "version_number",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"content\": \"<string>\",\n  \"dag_id\": \"<string>\",\n  \"version_number\": \"<integer>\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagSources/:dag_id?version_number=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagSources",
										":dag_id"
									],
									"query": [
										{
											"key": "version_number",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagSources/:dag_id?version_number=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagSources",
										":dag_id"
									],
									"query": [
										{
											"key": "version_number",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagSources/:dag_id?version_number=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagSources",
										":dag_id"
									],
									"query": [
										{
											"key": "version_number",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagSources/:dag_id?version_number=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagSources",
										":dag_id"
									],
									"query": [
										{
											"key": "version_number",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Acceptable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagSources/:dag_id?version_number=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagSources",
										":dag_id"
									],
									"query": [
										{
											"key": "version_number",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagSources/:dag_id?version_number=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagSources",
										":dag_id"
									],
									"query": [
										{
											"key": "version_number",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "dag_id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "DagStats",
			"item": [
				{
					"name": "Get Dag Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('List datasets',function(){",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.expect(pm.response.json().dags.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/dagStats",
							"host": [
								"{{url}}"
							],
							"path": [
								"dagStats"
							]
						},
						"description": "Get Dag statistics."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagStats?dag_ids=<string>&dag_ids=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagStats"
									],
									"query": [
										{
											"key": "dag_ids",
											"value": "<string>"
										},
										{
											"key": "dag_ids",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"dags\": [\n    {\n      \"dag_id\": \"<string>\",\n      \"stats\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    {\n      \"dag_id\": \"<string>\",\n      \"stats\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  ],\n  \"total_entries\": \"<integer>\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagStats?dag_ids=<string>&dag_ids=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagStats"
									],
									"query": [
										{
											"key": "dag_ids",
											"value": "<string>"
										},
										{
											"key": "dag_ids",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagStats?dag_ids=<string>&dag_ids=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagStats"
									],
									"query": [
										{
											"key": "dag_ids",
											"value": "<string>"
										},
										{
											"key": "dag_ids",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagStats?dag_ids=<string>&dag_ids=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagStats"
									],
									"query": [
										{
											"key": "dag_ids",
											"value": "<string>"
										},
										{
											"key": "dag_ids",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagStats?dag_ids=<string>&dag_ids=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagStats"
									],
									"query": [
										{
											"key": "dag_ids",
											"value": "<string>"
										},
										{
											"key": "dag_ids",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"<string>\"\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/public/dagStats?dag_ids=<string>&dag_ids=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"dagStats"
									],
									"query": [
										{
											"key": "dag_ids",
											"value": "<string>"
										},
										{
											"key": "dag_ids",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://fastapi:9091/api/v2"
		},
		{
			"key": "token",
			"value": "service-account-token"
		},
		{
			"key": "task_id",
			"value": "test_task"
		},
		{
			"key": "dag_id",
			"value": "test_api_dag"
		},
		{
			"key": "dag_run_id",
			"value": "scheduled__2020-11-11T00:00:00+00:00"
		},
		{
			"key": "xcom_key",
			"value": "return_value"
		},
		{
			"key": "user_id",
			"value": "Elvie219"
		},
		{
			"key": "tag_name",
			"value": "core"
		},
		{
			"key": "dag_id_pattern",
			"value": "example",
			"type": "string"
		},
		{
			"key": "import_error_id",
			"value": "1"
		},
		{
			"key": "mapped_dag_id",
			"value": "kpo_mapped",
			"type": "string"
		},
		{
			"key": "mapped_task_id",
			"value": "cowsay_mapped",
			"type": "string"
		},
		{
			"key": "asset_dag_run_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "asset_dag_id",
			"value": "simple_dataset_source",
			"type": "string"
		},
		{
			"key": "delete_dag",
			"value": "delete_api_dag"
		},
		{
			"key": "xcom_dag_id",
			"value": "example_xcom"
		},
		{
			"key": "mapped_dag_run_id",
			"value": ""
		},
		{
			"key": "xcom_task_id",
			"value": "push_by_returning",
			"type": "default"
		},
		{
			"key": "dag_parsing_file_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "asset_uri_queued_events",
			"value": "/",
			"type": "string"
		},
		{
			"key": "yesterday",
			"value": ""
		},
		{
			"key": "tomorrow",
			"value": ""
		},
		{
			"key": "backfill_id",
			"value": "1"
		},
		{
			"key": "connection_id",
			"value": "string",
			"type": "string"
		},
		{
			"key": "asset_id",
			"value": "1",
			"type": "default"
		},
		{
			"key": "queued_event_dag_id_producer",
			"value": "dataset_produces_1",
			"type": "string"
		},
		{
			"key": "queued_event_dag_id",
			"value": "dataset_consumes_1_never_scheduled",
			"type": "string"
		},
		{
			"key": "queued_event_dag_id2",
			"value": "dataset_consumes_1_and_2",
			"type": "string"
		},
		{
			"key": "pool_name",
			"value": "string",
			"type": "string"
		},
		{
			"key": "variable_key",
			"value": "string",
			"type": "string"
		}
	]
}
